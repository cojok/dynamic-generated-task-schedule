# name: ci/cd
# on:
#   pull_request:
#     types: [closed]
#     branches: [initial_version]
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@master
#       - name: Prepare artifact and deploy
#         env: 
#           HOST: ${{secrets.SSH_HOST}}
#           KEY: ${{secrets.SSH_KEY}}
#           USERNAME: ${{secrets.SSH_USERNAME}}
#           PATH_TO_FOLDER: ${{ secrets.PATH_TO_CODE }}
#         run: |
#           mkdir ../deploy
#           cp -TR . ../deploy
#           rm -rf ../deploy/.husky/ ../deploy/.git/ ../deploy/github/
#           cd ../deploy
#           npm i
#           npm run build
#           cd -
#           tar -cvf deploy.tar ../deploy/
#           mkdir ~/.ssh
#           echo "$KEY" > ~/.ssh/gh_actions_key
#           chmod 600 ~/.ssh/gh_actions_key
#           rsync -avzr --delete -e "ssh -i ~/.ssh/gh_actions_key -o StrictHostKeyChecking=no" deploy.tar ${USERNAME}@${HOST}:${PATH_TO_FOLDER}
#       - name: Build and start
#         uses: appleboy/ssh-action@master
#         env:
#           PATH_TO_FOLDER: ${{ secrets.PATH_TO_CODE }}
#           SC_PGDB_HOST: ${{ secrets.SC_PGDB_HOST }}
#           SC_PGDB_PORT: ${{ secrets.SC_PGDB_PORT }}
#           SC_PGDB_PASS: ${{ secrets.SC_PGDB_PASS }}
#           SC_PGDB_NAME: ${{ secrets.SC_PGDB_NAME }}
#           SC_PGDB_USER: ${{ secrets.SC_PGDB_USER }}
#           SC_SECRET: ${{ secrets.SC_SECRET }}
#           SC_SALT: ${{ secrets.SC_SALT }}
#           SC_PGDB_RUN_MIGRATION: ${{ secrets.SC_PGDB_RUN_MIGRATION }}
#         with:
#           host: ${{secrets.SSH_HOST}} # IP address of the server you wish to ssh into
#           key: ${{secrets.SSH_KEY}} # Private or public key of the server
#           username: ${{ secrets.SSH_USERNAME }} # User of the server you want to ssh into
#           envs: PATH_TO_FOLDER,SC_PGDB_HOST,SC_PGDB_PORT,SC_PGDB_PASS,SC_SECRET,SC_SALT,SC_PGDB_USER,SC_PGDB_NAME,SC_PGDB_RUN_MIGRATION
#           script: |
#             export NODE_ENV=prod
#             export SC_PGDB_RUN_MIGRATION= ${SC_PGDB_RUN_MIGRATION}
#             export NVM_DIR=~/.nvm
#             source ~/.nvm/nvm.sh
#             cd ${PATH_TO_FOLDER}
#             tar -xf deploy.tar
#             rm -rf deploy.tar
#             echo '==============='
#             echo 'STOP CURRENT RUNNING SERVER'
#             systemctl stop square-cup-labs-api
#             rm -rf api
#             mv deploy api
#             cd api
#             echo "NODE_ENV=prod" > .env.prod
#             echo "PORT=3000" >> .env.prod
#             echo SC_PGDB_HOST=${SC_PGDB_HOST} >> .env.prod
#             echo SC_PGDB_PORT=${SC_PGDB_PORT} >> .env.prod
#             echo SC_PGDB_PASS=${SC_PGDB_PASS} >> .env.prod
#             echo SC_PGDB_USER=${SC_PGDB_USER} >> .env.prod
#             echo SC_PGDB_NAME=${SC_PGDB_NAME} >> .env.prod
#             echo SC_REDIS_PASS=redisLocalPass >> .env.prod
#             echo SC_SECRET=${SC_SECRET} >> .env.prod
#             echo SC_SALT=${SC_SALT} >> .env.prod
#             echo SC_PGDB_RUN_MIGRATION=${SC_PGDB_RUN_MIGRATION} >> .env.prod
#             cat .env.prod
#             echo "=================="
#             echo "START NEW SERVER"
#             systemctl start square-cup-labs-api
#             systemctl status square-cup-labs-api
#             echo 'Deployment successful to digital ocean with cloning'
